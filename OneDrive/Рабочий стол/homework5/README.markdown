# Домашнее задание к уроку 5: Аугментации и работа с изображениями

## Описание проекта
Данный проект реализует шесть заданий по работе с изображениями героев из датасета, расположенного в папке `data/`.  Все результаты сохраняются в папку `results/`.

## Задание 1: Стандартные аугментации torchvision (15 баллов)
В рамках задания реализован модуль `standart_augmentations.py`, включающий ключевые преобразования из `torchvision.transforms` `RandomHorizontalFlip`, `RandomResizedCrop`, `ColorJitter`, `RandomRotation` и `RandomGrayscale`. Для демонстрации работы пайплайна отобрано 5 изображений из разных классов обучающей выборки `train/`, к которым последовательно применены: исходный вид, каждая аугментация по отдельности и их комбинация.

### Результаты
- Оригинальные изображения и результаты аугментаций сохранены в файл `results/standart_augmentation`.
- Пример результата:  
  ![Результаты задания 1](results/task1.png)

## Задание 2: Кастомные аугментации (20 баллов)
Реализованы четыре кастомные аугментации в `custom_augmentations.py`: реверсивные цвета (`ReverseColors`), гауссово размытие (`GaussianBlur`), увеличение контрастности (`IncreaseContrast`) и понижение яркости (`DecreaseBrightness`). Эти аугментации применены к изображениям из `train` и визуально сравнены с аугментациями из файла `extra_augs.py` (гауссов шум, случайное затирание, соляризация, автоконтраст).

### Результаты
- Сравнение кастомных аугментаций с аугментациями из `extra_augs.py` сохранено в файл `results/custom_augmentation`.
- Пример результата:  
  ![Результаты задания 2](results/task2.png)

## Задание 3: Анализ датасета (10 баллов)
Подсчитано количество изображений в `analyze_dataset.py`в каждом классе, найдены минимальный, максимальный и средний размеры изображений, а также визуализировано распределение размеров и гистограмма по классам.

### Результаты
- Анализ распределения данных:
В наборе представлено 6 категорий изображений
Каждый класс содержит одинаковое количество экземпляров - по 30 изображений
Равномерное распределение подтверждает сбалансированность выборки
- Исследование параметров изображений:
  Минимальные размеры: 210×240 пикселей
  Максимальные размеры: 736×1308 пикселей
  Средние значения размеров: 539×624 пикселя

Значительный разброс размеров требует дополнительной обработки
Визуализация результатов:
- Гистограмма распределения изображений по классам:  
  ![Гистограмма по классам](results/task3lol.png)
- Распределение размеров изображений:  
  ![Распределение размеров](results/task3.png)

## Задание 4: Pipeline аугментаций (20 баллов)
Разработан модуль `augmentation_pipeline.py`, реализующий систему управления преобразованиями изображений. Решение включает:
### Основные компоненты
**Управляемый конвейер обработки**:
- Класс `AugmentationPipeline` с методами:
  `add_transform` - добавление новых преобразований
  `remove_transform` - удаление операций
  `process` - применение цепочки преобразований
  `get_transforms` - просмотр текущего пайплайна
- **Предустановленные профили**:
- Легкий (`light`):
  Поворот ±10°
  Легкое размытие (`σ=0.8`)
- Средний (`medium`):
  Частичное затенение (`p=0.4`)
  Умеренный контраст (`1.3x`)
  25% вероятность `grayscale`
- Интенсивный (`heavy`):
  Радикальная соляризация
  Автоконтраст (`p=0.8`)
  Яркость `0.5x`
  Инверсия цветов
Особенности реализации
Поддержка как PIL.Image, так и torch.Tensor
Возможность каскадного применения преобразований
Визуализация промежуточных результатов

Сравнение с альтернативными методами обработки
Реализован класс `AugmentationPipeline` с методами `add_augmentation`, `remove_augmentation`, `apply` и `get_augmentations`в `augmentation_pipeline.py`. Создано три уникальные конфигурации аугментаций: `light`, `medium` и `heavy`. Каждая конфигурация применена к изображениям из `train`, а также добавлено сравнение с кастомными аугментациями для визуального анализа.

### Результаты
- Изображения с примененными конфигурациями и сравнением кастомных аугментаций сохранены в файлы `results/pipeline`.
- Пример результата:  
  ![Результаты задания 4](results/task4.png)

## Задание 5: Эксперимент с размерами (10 баллов)
Проведен эксперимент с разными размерами изображений (64x64, 128x128, 224x224, 512x512, 1024x1024) в `experiment_sizes.py`. Для каждого размера измерено время загрузки и применения аугментаций к 100 изображениям, а также потребление памяти. Построены графики зависимости времени и памяти от размера.

### Результаты
- Вывод эксперимента:
  - Обработка размера 64x64... Время: 0.16 сек, Память: 0.71 МБ
  - Обработка размера 128x128... Время: 0.17 сек, Память: 0.02 МБ
  - Обработка размера 224x224... Время: 0.18 сек, Память: 0.01 МБ
  - Обработка размера 512x512... Время: 0.27 сек, Память: 0.01 МБ
  - Обработка размера 1024x1024... Время: 0.64 сек, Память: 0.00 МБ
- График зависимости времени и памяти от размера:  
  ![Результаты задания 5](results/task5.png)

## Задание 6: Дообучение предобученных моделей (25 баллов)
Использована предобученная модель `resnet18` из `torchvision`в `train_model.py`. Последний слой заменен на количество классов датасета. Модель дообучена на `train`, проверено качество на `test`, а процесс обучения визуализирован (потери и точность).

### Результаты
- Вывод обучения:
  - Эпоха 1/5: Потери = 1.6711, Точность (train) = 28.89%, Точность (test) = 69.33%
  - Эпоха 2/5: Потери = 0.4882, Точность (train) = 97.78%, Точность (test) = 80.00%
  - Эпоха 3/5: Потери = 0.1677, Точность (train) = 100.00%, Точность (test) = 82.83%
  - Эпоха 4/5: Потери = 0.0665, Точность (train) = 100.00%, Точность (test) = 85.67%
  - Эпоха 5/5: Потери = 0.0383, Точность (train) = 100.00%, Точность (test) = 86.67%
  - Графики сохранены в папке results
- Графики потерь и точности:  
  ![Результаты задания 6](results/task6.png)

## Общий вывод
В ходе проекта был успешно реализован комплексный анализ и обработка изображений, включая аугментации, исследование датасета и обучение нейросети. Разработанные методы аугментации (стандартные и кастомные) продемонстрировали эффективность в увеличении разнообразия данных. Анализ показал сбалансированность датасета (по 30 изображений на 6 классов) и значительный разброс размеров (от 210×240 до 736×1308 пикселей). Эксперименты выявили линейный рост времени обработки с увеличением размера (0.16-0.64 сек) при стабильном потреблении памяти (~0.7 МБ).

Дообучение модели ResNet18 дало отличные результаты: 100% точность на обучении и 86.67% на тесте за 5 эпох, с уменьшением потерь с 1.67 до 0.038. Визуализации (task5.png, task6.png) подтвердили эффективность подхода. Проект охватил полный цикл работы с изображениями - от предобработки до обучения, показав потенциал для дальнейшего развития.
